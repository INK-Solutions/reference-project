service.mock = true

# Data source
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

spring.main.allow-bean-definition-overriding = true

spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL81Dialect

spring.kafka.bootstrap-servers = ${spring.embedded.kafka.brokers}
kafka.bootstrap-servers = ${spring.embedded.kafka.brokers}

spring.kafka.producer.properties.schema.registry.url= not-used
spring.kafka.producer.value-serializer = tech.example.systemtest.kafka.TestKafkaAvroValueSerializer
spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer

spring.kafka.consumer.properties.schema.registry.url= not-used
spring.kafka.consumer.value-deserializer = tech.example.systemtest.kafka.TestKafkaAvroValueDeserializer
spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.group-id = system-test-id

spring.kafka.auto.offset.reset = earliest

spring.kafka.producer.auto.register.schemas= true
spring.kafka.properties.specific.avro.reader= true